name: tests

on: [push, pull_request]

jobs:
  windows:
    name: "py-${{ matrix.config.python }} lib-${{ matrix.config.ffmpeg }} ${{matrix.config.os}}"
    runs-on: ${{ matrix.config.os }}

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, python: 3.7, ffmpeg: "5.1"}

    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Conda
      shell: bash
      run: |
        . $CONDA/etc/profile.d/conda.sh
        conda config --set always_yes true
        conda config --add channels conda-forge
        conda create -q -n pyav \
          cython \
          numpy \
          pillow \
          python=${{ matrix.config.python }} \
          setuptools
          if [[ "${{ matrix.config.ffmpeg }}" == "5.1" ]]; then
            curl -L -o ffmpeg.7z https://www.gyan.dev/ffmpeg/builds/packages/ffmpeg-5.1.2-full_build-shared.7z
          else
            conda install -q -n pyav ffmpeg=${{ matrix.config.ffmpeg }}
          fi

    - name: Build
      shell: bash
      run: |
        . $CONDA/etc/profile.d/conda.sh
        conda activate pyav
        if [[ "${{ matrix.config.ffmpeg }}" != "4.3" ]]; then
          7z x ffmpeg.7z -r -o$CONDA_PREFIX/Library/ ffmpeg-5.1.2-full_build-shared\
        fi
        python setup.py build_ext --inplace --ffmpeg-dir=$CONDA_PREFIX/Library

    - name: Test
      shell: bash
      run: |
        . $CONDA/etc/profile.d/conda.sh
        conda activate pyav
        python setup.py test

  package-source:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.7
      - name: Build source package
        run: |
          pip install cython
          python scripts/fetch-vendor.py /tmp/vendor
          PKG_CONFIG_PATH=/tmp/vendor/lib/pkgconfig python setup.py sdist
      - name: Upload source package
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  package-wheel:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            arch: AMD64

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.7
      - name: Set up QEMU
        if: matrix.os == 'ubuntu-latest'
        uses: docker/setup-qemu-action@v2
      - name: Install packages
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install pkg-config
      - name: Build wheels
        env:
          CIBW_ARCHS: ${{ matrix.arch }}
          CIBW_BEFORE_ALL_LINUX: yum install -y alsa-lib libxcb
          CIBW_BEFORE_BUILD: pip install cython && python scripts/fetch-vendor.py /tmp/vendor
          CIBW_BEFORE_BUILD_WINDOWS: pip install cython && python scripts\fetch-vendor.py C:\cibw\vendor
          CIBW_ENVIRONMENT_LINUX: LD_LIBRARY_PATH=/tmp/vendor/lib:$LD_LIBRARY_PATH PKG_CONFIG_PATH=/tmp/vendor/lib/pkgconfig
          CIBW_ENVIRONMENT_MACOS: PKG_CONFIG_PATH=/tmp/vendor/lib/pkgconfig LDFLAGS=-headerpad_max_install_names
          CIBW_ENVIRONMENT_WINDOWS: INCLUDE=C:\\cibw\\vendor\\include LIB=C:\\cibw\\vendor\\lib PYAV_SKIP_TESTS=unicode_filename
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: delvewheel repair --add-path C:\cibw\vendor\bin -w {dest_dir} {wheel}
          CIBW_SKIP: cp36-* pp36-* pp38-win* *-musllinux*
          CIBW_TEST_COMMAND: mv {project}/av {project}/av.disabled && python -m unittest discover -t {project} -s tests && mv {project}/av.disabled {project}/av
          CIBW_TEST_REQUIRES: numpy
          # skip tests when there are no binary wheels of numpy
          CIBW_TEST_SKIP: cp37-* pp* *_i686
        run: |
          pip install cibuildwheel delvewheel
          cibuildwheel --output-dir dist
        shell: bash
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/
